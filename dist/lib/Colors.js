"use strict";
/*
electron-reload-ts Colors

This code was Adapted from Marak Squires colors.js library <https://github.com/Marak/colors.js>
used under the conditions of the MIT license reproduced below,
*/
Object.defineProperty(exports, "__esModule", { value: true });
class ColorStyle {
    constructor(openColor, closeColor) {
        this.openColor = openColor;
        this.closeColor = closeColor;
        this.open = ColorStyle.Create(openColor);
        this.close = ColorStyle.Create(closeColor);
    }
    static Create(color) {
        return `\u001b[${color}m`;
    }
    Wrap(text) {
        return `${this.open}${text}${this.close}`;
    }
}
exports.ColorStyle = ColorStyle;
const codes = {
    reset: [0, 0],
    bold: [1, 22],
    dim: [2, 22],
    italic: [3, 23],
    underline: [4, 24],
    inverse: [7, 27],
    hidden: [8, 28],
    strikethrough: [9, 29],
    black: [30, 39],
    red: [31, 39],
    green: [32, 39],
    yellow: [33, 39],
    blue: [34, 39],
    magenta: [35, 39],
    cyan: [36, 39],
    white: [37, 39],
    gray: [90, 39],
    grey: [90, 39],
    bgBlack: [40, 49],
    bgRed: [41, 49],
    bgGreen: [42, 49],
    bgYellow: [43, 49],
    bgBlue: [44, 49],
    bgMagenta: [45, 49],
    bgCyan: [46, 49],
    bgWhite: [47, 49],
    // legacy styles for colors pre v1.0.0
    blackBG: [40, 49],
    redBG: [41, 49],
    greenBG: [42, 49],
    yellowBG: [43, 49],
    blueBG: [44, 49],
    magentaBG: [45, 49],
    cyanBG: [46, 49],
    whiteBG: [47, 49],
};
const styles = {};
Object.keys(codes).forEach(function (key) {
    const val = codes[key];
    styles[key] = new ColorStyle(val[0], val[1]);
});
const wrapperFn = (text, color) => {
    return styles[color].Wrap(text);
};
exports.Colors = wrapperFn;
//# sourceMappingURL=data:application/json;base64,