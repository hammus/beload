"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const events_1 = require("events");
const globby_1 = require("globby");
const callsite_1 = __importDefault(require("callsite"));
const os_1 = require("os");
const Colors_1 = require("./Colors");
if (!Array.prototype.unique) {
    Array.prototype.unique = function () {
        return this.filter((value, index) => {
            return this.indexOf(value) === index;
        });
    };
}
class Watcher extends events_1.EventEmitter {
    /**
     * File Watching using NodeJS fs.watch
     * @param globPattern The glob or array of globs to match against
     * @param watchOptions Options object
     */
    constructor(globPattern, watchOptions = {}) {
        super();
        this.options = { lockDuration: 1000, absolute: true, encoding: "utf-8", persistent: true, recursive: true, verbose: false };
        this.watchers = [];
        this.locked = false;
        this.locks = [];
        this.options = { ...this.options, ...watchOptions };
        // Callsite Gets the directory of the file this constructor was called from so we can glob from there instead of here
        this.options.cwd = (typeof this.options.cwd === "undefined") ? path.dirname(callsite_1.default()[1].getFileName()) : this.options.cwd;
        this.files = this.globFiles(globPattern).map((g) => path.normalize(g));
        this.directories = this.files.map((f) => path.dirname(f)).unique();
    }
    log(fnName, ...logargs) {
        if (this.options.verbose) {
            // tslint:disable-next-line:no-console
            console.log(`${os_1.EOL}${Colors_1.Colors(`ReloadWatcher::${fnName}`, "yellow")}`, ...logargs, os_1.EOL);
        }
    }
    globFiles(globPattern) {
        return globby_1.sync(globPattern, this.options);
    }
    isDirectory(source) {
        return fs.lstatSync(source).isDirectory();
    }
    isFile(source) {
        return !fs.lstatSync(source).isDirectory();
    }
    getDirectories(source) {
        return fs.readdirSync(source).map((name) => path.normalize(path.join(source, name))).filter(this.isDirectory);
    }
    getFiles(dir) {
        return fs.readdirSync(dir).map((name) => path.normalize(path.join(dir, name))).filter(this.isFile);
    }
    onWatchEventFile(e, f) {
        const FN_NAME = "FileWatcher";
        if (this.locked || e !== "change") {
            return;
        }
        this.lock();
        this.log(FN_NAME, "Node.js FSEvent:", e, "Node FSEvent File:", f);
        this.emit("all", f);
        this.emit("change", f);
    }
    /**
     * fs.watch event handler for directories
     * We watch directories for add, rename delete events so we can add and remove new listeners as necessary
     *
     * @param e {string} event type
     * @param f {string} file
     * @param dir {string} the directory
     */
    onWatchEventDir(e, f, dir) {
        const FN_NAME = "DirectoryWatcher";
        if (this.locked || e !== "rename") {
            return;
        }
        this.lock();
        this.log(FN_NAME, "Node.js FSEvent:", e, "Node FSEvent File:", f, "Directory:", dir);
        const abs = path.join(dir, path.basename(f));
        if (!fs.existsSync(abs)) {
            const renamedFile = this.getRenamed(dir);
            if (typeof renamedFile !== "undefined") {
                this.log(FN_NAME, `Old File: ${abs}`);
                this.log(FN_NAME, `Renamed File: ${renamedFile}`);
                this.emit("all", abs, renamedFile);
                this.emit("rename", abs, renamedFile);
                this.removeWatcher(abs);
            }
            else {
                this.emit("all", abs);
                this.emit("delete", abs);
            }
            return;
        }
        if (!this.files.includes(abs)) {
            // Create
            this.watchers.push(this.createFileWatcher(abs));
            this.emit("all", abs);
            this.emit("add", abs);
        }
    }
    removeWatcher(file) {
        const watcherStruct = this.getWatcher(file);
        if (typeof watcherStruct !== "undefined") {
            watcherStruct.watcher.close();
            this.watchers.splice(this.watchers.indexOf(watcherStruct), 1);
        }
    }
    getRenamed(dir) {
        const FN_NAME = "isRename";
        const files = this.getFiles(dir);
        this.log(FN_NAME, "Disk Files:", files);
        this.log(FN_NAME, "Watched Files", this.files);
        for (const f of files) {
            if (!this.files.includes(f)) {
                return f;
            }
        }
        return undefined;
    }
    createFileWatcher(file) {
        return {
            target: file,
            watcher: fs.watch(file, this.options, (e, _) => { this.onWatchEventFile(e, file); })
        };
    }
    createDirWatcher(dir) {
        return {
            target: dir,
            watcher: fs.watch(dir, this.options, (e, f) => { this.onWatchEventDir(e, f, dir); })
        };
    }
    getWatcher(filename) {
        return this.watchers.find((w) => path.normalize(w.target) === path.normalize(filename));
    }
    lock() {
        this.locked = true;
        setTimeout(() => { this.locked = false; }, this.options.lockDuration);
    }
    /**
     * Attachs watch listeners and starts watching specified files
     * Available events are
     * `add` - Emitted when a file is created
     * `delete` - Emitted when a file is deleted
     * `change` - Emitted when a file change is detected
     * `rename` - Emitted when a file is renamed
     * `all` - Emitted for all the above events
     */
    Start() {
        const FN_NAME = "Start";
        this.log(FN_NAME, "Watching Files:" + os_1.EOL + this.files.map((f) => `\u001b[32m${f}\u001b[39m`).join(os_1.EOL));
        for (const file of this.files) {
            this.watchers.push(this.createFileWatcher(file));
        }
        this.log(FN_NAME, "Watching Directories:" + os_1.EOL + this.directories.map((f) => `\u001b[32m${f}\u001b[39m`).join(os_1.EOL));
        for (const dir of this.directories) {
            this.watchers.push(this.createDirWatcher(dir));
        }
        return this;
    }
}
exports.Watcher = Watcher;
//# sourceMappingURL=data:application/json;base64,